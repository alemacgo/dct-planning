;;; Auto-generated PDDL file from prenex formula

(define (domain qbfeae)

	(:constants
		zero
		max
	)

	(:predicates
		(begin_so-forall_t1 )
		(coin_t1 ?x0)
		(e1 ?x0)
		(e2 ?x0)
		(guess_e1 )
		(guess_e2 )
		(holds_and_11 ?x0 ?x1)
		(holds_and_16 ?x0)
		(holds_and_20 ?x0)
		(holds_and_24 ?x0)
		(holds_and_26 ?x0 ?x1)
		(holds_and_3 ?x0)
		(holds_and_6 ?x0)
		(holds_and_9 ?x0)
		(holds_exists_28 ?x0)
		(holds_forall_29 ?x0)
		(holds_or_10 ?x0)
		(holds_or_25 ?x0)
		(holds_or_27 ?x0 ?x1)
		(holds_so-exists_e1 )
		(holds_so-exists_e2 )
		(holds_so-forall_t1 )
		(ise1 ?x0)
		(ise2 ?x0)
		(ist1 ?x0)
		(iterate_t1 )
		(n ?x0 ?x1)
		(not_e1 ?x0)
		(not_e2 ?x0)
		(not_t1 ?x0)
		(p ?x0 ?x1)
		(so-forall_max_t1 ?x0)
		(so-forall_suc_t1 ?x0 ?x1)
		(so-forall_zero_t1 ?x0)
		(suc ?x0 ?x1)
		(t1 ?x0)
		(begin)
		(holds_goal)
		(proof)
	)

	(:action establish_and_24
		:parameters	(?x)
		:precondition	(and (ise2 ?x) (not_e2 ?x)  (proof))
		:effect		(and (holds_and_24 ?x) )
	)
	(:action establish_and_20
		:parameters	(?x)
		:precondition	(and (ist1 ?x) (not_t1 ?x)  (proof))
		:effect		(and (holds_and_20 ?x) )
	)
	(:action establish_and_16
		:parameters	(?x)
		:precondition	(and (ise1 ?x) (not_e1 ?x)  (proof))
		:effect		(and (holds_and_16 ?x) )
	)
	(:action establish_or_25_0
		:parameters	(?x)
		:precondition	 (and (holds_and_16 ?x)  (proof))
		:effect		(and (holds_or_25 ?x))
	)
	(:action establish_or_25_1
		:parameters	(?x)
		:precondition	 (and (holds_and_20 ?x)  (proof))
		:effect		(and (holds_or_25 ?x))
	)
	(:action establish_or_25_2
		:parameters	(?x)
		:precondition	 (and (holds_and_24 ?x)  (proof))
		:effect		(and (holds_or_25 ?x))
	)
	(:action establish_and_26
		:parameters	(?c ?x)
		:precondition	(and (n ?x ?c) (holds_or_25 ?x)  (proof))
		:effect		(and (holds_and_26 ?c ?x) )
	)
	(:action establish_and_9
		:parameters	(?x)
		:precondition	(and (ise2 ?x) (e2 ?x)  (proof))
		:effect		(and (holds_and_9 ?x) )
	)
	(:action establish_and_6
		:parameters	(?x)
		:precondition	(and (ist1 ?x) (t1 ?x)  (proof))
		:effect		(and (holds_and_6 ?x) )
	)
	(:action establish_and_3
		:parameters	(?x)
		:precondition	(and (ise1 ?x) (e1 ?x)  (proof))
		:effect		(and (holds_and_3 ?x) )
	)
	(:action establish_or_10_0
		:parameters	(?x)
		:precondition	 (and (holds_and_3 ?x)  (proof))
		:effect		(and (holds_or_10 ?x))
	)
	(:action establish_or_10_1
		:parameters	(?x)
		:precondition	 (and (holds_and_6 ?x)  (proof))
		:effect		(and (holds_or_10 ?x))
	)
	(:action establish_or_10_2
		:parameters	(?x)
		:precondition	 (and (holds_and_9 ?x)  (proof))
		:effect		(and (holds_or_10 ?x))
	)
	(:action establish_and_11
		:parameters	(?c ?x)
		:precondition	(and (p ?x ?c) (holds_or_10 ?x)  (proof))
		:effect		(and (holds_and_11 ?c ?x) )
	)
	(:action establish_or_27_0
		:parameters	(?c ?x)
		:precondition	 (and (holds_and_11 ?c ?x)  (proof))
		:effect		(and (holds_or_27 ?c ?x))
	)
	(:action establish_or_27_1
		:parameters	(?c ?x)
		:precondition	 (and (holds_and_26 ?c ?x)  (proof))
		:effect		(and (holds_or_27 ?c ?x))
	)
	(:action establish_exists_28
		:parameters	(?c ?x)
		:precondition	 (and (holds_or_27 ?c ?x)  (proof))
		:effect		(and (holds_exists_28 ?c))
	)
	(:action establish_forall_29_base
		:parameters	()
		:precondition	 (and (holds_exists_28 zero)  (proof))
		:effect		(and (holds_forall_29 zero) )
	)
	(:action establish_forall_29_inductive
		:parameters	( ?iv0 ?iv1)
		:precondition	(and (holds_forall_29 ?iv0) (suc ?iv0 ?iv1) (holds_exists_28 ?iv1)  (proof))
		:effect		(and   (holds_forall_29 ?iv1))
	)
	(:action set_true_e2
		:parameters	(?x0)
		:precondition	(and  (not_e2 ?x0) (guess_e2) )
		:effect			(and (e2 ?x0) (not  (not_e2 ?x0)) )
	)
	(:action set_false_e2
		:parameters	(?x0)
		:precondition	(and (e2 ?x0)  (guess_e2) )
		:effect		(and  (not_e2 ?x0) (not (e2 ?x0))   )
	)
	(:action end_guess_e2
		:precondition	 (guess_e2) 
		:effect		(and (proof) (not (guess_e2) ))
	)
	(:action dummy_guess_e2
		:precondition	 (guess_e2) 
		:effect	 (guess_e2) )
	(:action establish_soexist_e2
		:precondition	(and (holds_forall_29  max))
		:effect	(and (not (holds_forall_29  max)) (holds_so-exists_e2)  (not (proof))
				(forall (?ivDel0 ?ivDel1) (not (holds_or_27 ?ivDel0 ?ivDel1)))
				(forall (?ivDel0) (not (holds_and_6 ?ivDel0)))
				(forall (?ivDel0) (not (holds_forall_29 ?ivDel0)))
				(forall (?ivDel0) (not (holds_and_3 ?ivDel0)))
				(forall (?ivDel0) (not (holds_exists_28 ?ivDel0)))
				(forall (?ivDel0) (not (holds_or_25 ?ivDel0)))
				(forall (?ivDel0 ?ivDel1) (not (holds_and_11 ?ivDel0 ?ivDel1)))
				(forall (?ivDel0) (not (holds_and_20 ?ivDel0)))
				(forall (?ivDel0 ?ivDel1) (not (holds_and_26 ?ivDel0 ?ivDel1)))
				(forall (?ivDel0) (not (holds_and_16 ?ivDel0)))
				(forall (?ivDel0) (not (holds_and_24 ?ivDel0)))
				(forall (?ivDel0) (not (holds_or_10 ?ivDel0)))
				(forall (?ivDel0) (not (holds_and_9 ?ivDel0))))
	)
	(:action zero_plus_one_t1
		:parameters	(?x0)
		:precondition	(and (coin_t1 ?x0) (not_t1 ?x0) (iterate_t1)  )
		:effect			(and (not (coin_t1 ?x0)) (not (not_t1 ?x0)) (t1 ?x0) (guess_e2) )
	)
	(:action one_plus_one_0_t1
		:parameters	( ?iv0 ?iv1)
		:precondition	(and  (iterate_t1) (coin_t1  ?iv0) (t1  ?iv0)  (so-forall_suc_t1 ?iv0 ?iv1) )
		:effect			(and (not (coin_t1  ?iv0)) (not (t1  ?iv0)) (not_t1  ?iv0) (coin_t1  ?iv1) )
	)
	(:action one_plus_one_final_t1
		:parameters (?ivmax0)
		:precondition	(and (iterate_t1) (coin_t1 ?ivmax0) (t1 ?ivmax0) (so-forall_max_t1 ?ivmax0))
		:effect	(and (not (iterate_t1) ) (not (coin_t1  ?ivmax0)) (not (t1 ?ivmax0)) (not_t1 ?ivmax0) (holds_so-forall_t1) )
	)
	(:action change_for_coin_t1
		:parameters (?ivzero0)
		:precondition	(and (iterate_t1) (holds_so-exists_e2)(so-forall_zero_t1 ?ivzero0))
		:effect	(and (not (holds_so-exists_e2)) (coin_t1 ?ivzero0) )
	)
	(:action init_so-forall_t1
		:precondition	(and (iterate_t1) (begin_so-forall_t1))
		:effect	(and (not (begin_so-forall_t1)) (guess_e2) )
	)
	(:action set_true_e1
		:parameters	(?x0)
		:precondition	(and  (not_e1 ?x0) (guess_e1) )
		:effect			(and (e1 ?x0) (not  (not_e1 ?x0)) )
	)
	(:action set_false_e1
		:parameters	(?x0)
		:precondition	(and (e1 ?x0)  (guess_e1) )
		:effect		(and  (not_e1 ?x0) (not (e1 ?x0))   )
	)
	(:action end_guess_e1
		:precondition	 (guess_e1) 
		:effect		(and  (iterate_t1) (begin_so-forall_t1)  (not (guess_e1) ))
	)
	(:action dummy_guess_e1
		:precondition	 (guess_e1) 
		:effect	 (guess_e1) )
	(:action establish_soexist_e1
		:precondition	(and (holds_so-forall_t1))
		:effect	(and (not (holds_so-forall_t1)) (holds_so-exists_e1) )
	)
	(:action begin-proof
		:precondition	(begin)
		:effect		 (and (guess_e1)  (not (begin)))
	)
	(:action prove-goal
		:precondition	 (and (holds_so-exists_e1))
		:effect		(holds_goal)
	)
)